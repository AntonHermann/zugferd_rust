use serde::{Serialize, Serializer};

#[derive(Clone, Copy, PartialEq, Debug)]
pub enum InvoiceTypeCode {
    RequestForPayment,
    DebitNoteRelatedToGoodsOrServices,
    CreditNoteRelatedToGoodsOrServices,
    MeteredServiceInvoice,
    CreditNoteRelatedToFinancialAdjustments,
    DebitNoteRelatedToFinancialAdjustments,
    TaxNotification,
    InvoicingDataSheet,
    DirectPaymentValuation,
    ProvisionalPaymentValuation,
    PaymentValuation,
    InterimApplicationForPayment,
    FinalPaymentRequestBasedOnCompletionOfWork,
    PaymentRequestForCompletedUnits,
    SelfBilledCreditNote,
    ConsolidatedCreditNoteForGoodsAndServices,
    PriceVariationInvoice,
    CreditNoteForPriceVariation,
    DelcredereCreditNote,
    ProformaInvoice,
    PartialInvoice,
    CommercialInvoiceWhichIncludesAPackingList,
    CommercialInvoice,
    CreditNote,
    CommissionNote,
    DebitNote,
    CorrectedInvoice,
    ConsolidatedInvoice,
    PrepaymentInvoice,
    HireInvoice,
    TaxInvoice,
    SelfBilledInvoice,
    DelcredereInvoice,
    FactoredInvoice,
    LeaseInvoice,
    ConsignmentInvoice,
    FactoredCreditNote,
    OpticalCharacterReadingPaymentCreditNote,
    DebitAdvice,
    ReversalOfDebit,
    ReversalOfCredit,
    SelfBilledDebitNote,
    ForwardersCreditNote,
    ForwardersInvoiceDiscrepancyReport,
    InsurersInvoice,
    ForwardersInvoice,
    PostChargesDocument,
    InvoiceInformationForAccountingPurposes,
    FreightInvoice,
    ClaimNotification,
    ConsularInvoice,
    PartialConstructionInvoice,
    PartialFinalConstructionInvoice,
    FinalConstructionInvoice,
    CustomsInvoice,
}

impl InvoiceTypeCode {
    pub fn as_str(&self) -> &'static str {
        match self {
            InvoiceTypeCode::CommercialInvoice => "380",
            InvoiceTypeCode::CreditNote => "381",
            InvoiceTypeCode::CorrectedInvoice => "384",
            InvoiceTypeCode::SelfBilledInvoice => "389",
            InvoiceTypeCode::SelfBilledCreditNote => "261",
            InvoiceTypeCode::PrepaymentInvoice => "386",
            InvoiceTypeCode::InvoiceInformationForAccountingPurposes => "751",
            InvoiceTypeCode::RequestForPayment => "71",
            InvoiceTypeCode::DebitNoteRelatedToGoodsOrServices => "80",
            InvoiceTypeCode::CreditNoteRelatedToGoodsOrServices => "81",
            InvoiceTypeCode::MeteredServiceInvoice => "82",
            InvoiceTypeCode::CreditNoteRelatedToFinancialAdjustments => "83",
            InvoiceTypeCode::DebitNoteRelatedToFinancialAdjustments => "84",
            InvoiceTypeCode::TaxNotification => "102",
            InvoiceTypeCode::InvoicingDataSheet => "130",
            InvoiceTypeCode::DirectPaymentValuation => "202",
            InvoiceTypeCode::ProvisionalPaymentValuation => "203",
            InvoiceTypeCode::PaymentValuation => "204",
            InvoiceTypeCode::InterimApplicationForPayment => "211",
            InvoiceTypeCode::FinalPaymentRequestBasedOnCompletionOfWork => "218",
            InvoiceTypeCode::PaymentRequestForCompletedUnits => "219",
            InvoiceTypeCode::ConsolidatedCreditNoteForGoodsAndServices => "262",
            InvoiceTypeCode::PriceVariationInvoice => "295",
            InvoiceTypeCode::CreditNoteForPriceVariation => "296",
            InvoiceTypeCode::DelcredereCreditNote => "308",
            InvoiceTypeCode::ProformaInvoice => "325",
            InvoiceTypeCode::PartialInvoice => "326",
            InvoiceTypeCode::CommercialInvoiceWhichIncludesAPackingList => "331",
            InvoiceTypeCode::CommissionNote => "382",
            InvoiceTypeCode::DebitNote => "383",
            InvoiceTypeCode::ConsolidatedInvoice => "385",
            InvoiceTypeCode::HireInvoice => "387",
            InvoiceTypeCode::TaxInvoice => "388",
            InvoiceTypeCode::DelcredereInvoice => "390",
            InvoiceTypeCode::FactoredInvoice => "393",
            InvoiceTypeCode::LeaseInvoice => "394",
            InvoiceTypeCode::ConsignmentInvoice => "395",
            InvoiceTypeCode::FactoredCreditNote => "396",
            InvoiceTypeCode::OpticalCharacterReadingPaymentCreditNote => "420",
            InvoiceTypeCode::DebitAdvice => "456",
            InvoiceTypeCode::ReversalOfDebit => "457",
            InvoiceTypeCode::ReversalOfCredit => "458",
            InvoiceTypeCode::SelfBilledDebitNote => "527",
            InvoiceTypeCode::ForwardersCreditNote => "532",
            InvoiceTypeCode::ForwardersInvoiceDiscrepancyReport => "553",
            InvoiceTypeCode::InsurersInvoice => "575",
            InvoiceTypeCode::ForwardersInvoice => "623",
            InvoiceTypeCode::PostChargesDocument => "633",
            InvoiceTypeCode::FreightInvoice => "780",
            InvoiceTypeCode::ClaimNotification => "817",
            InvoiceTypeCode::ConsularInvoice => "870",
            InvoiceTypeCode::PartialConstructionInvoice => "875",
            InvoiceTypeCode::PartialFinalConstructionInvoice => "876",
            InvoiceTypeCode::FinalConstructionInvoice => "877",
            InvoiceTypeCode::CustomsInvoice => "935",
        }
    }
}

impl Serialize for InvoiceTypeCode {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}
